package cookbook.javafx;

import java.io.File;
import java.io.IOException;
import java.sql.SQLException;
import java.util.Optional;

import javafx.beans.value.ChangeListener;
import javafx.beans.value.ObservableValue;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.control.Alert;
import javafx.scene.control.Button;
import javafx.scene.control.ButtonType;
import javafx.scene.control.ComboBox;
import javafx.scene.control.Label;
import javafx.scene.control.ListView;
import javafx.scene.control.TextArea;
import javafx.scene.control.TextField;
import javafx.scene.control.Alert.AlertType;
import javafx.scene.input.MouseEvent;
import javafx.scene.layout.AnchorPane;
import javafx.scene.layout.BorderPane;
import javafx.stage.FileChooser;
import javafx.stage.FileChooser.ExtensionFilter;
import cookbook.model.*;
import cookbook.tools.CategoryDAO;
import cookbook.tools.RecipeDAO;

public class EditViewController {
	@FXML
	private TextField recipeNameText;
	@FXML
	private TextField cookTimeText;
	@FXML
	private TextField servePeopleText;
	@FXML
	private TextField inNameText;
	@FXML
	private TextField inAmountText;
	@FXML
	private TextField inUnityText;
	@FXML
	private TextArea stepsText;
	@FXML
	private ListView ingredientsList;
	@FXML
	private ComboBox categoryBox;
	@FXML
	private Button deleteIngredientButton;
	@FXML
	private Button addIngredientButton;
	@FXML
	private Button backButton;
	@FXML
	private Button confirmButton;
	@FXML
	private Button choosePicButton;
	@FXML
	private Label pictureLabel;
	@FXML
	private TextField userIDText;

	private int inId = -1;
	private String reName = "";
	private int cookTime = -1;
	private int servePeople = -1;
	private String inName = "";
	private String category = "";
	private int amount = 0;
	private String inUnit = " ";
	private String steps = "";
	private int inCounter = 0;
	private String imageURL = "";
	private int userID;
	private ObservableList<Ingredient> listData = FXCollections.observableArrayList();
	private CookBook cookbook = new CookBook();

	ObservableList<String> categoryList;

	@FXML
	public void backButtonEvent(ActionEvent event) {
		AnchorPane searchView = null;
		BorderPane menuView = null;
		try {
			Alert alert = new Alert(AlertType.WARNING, "You may lost the changes you've made! ");
			alert.showAndWait();

			menuView = FXMLLoader.load(getClass().getResource("/cookbook.javafx/MenuView.fxml"));
			searchView = FXMLLoader.load(getClass().getResource("/cookbook.javafx/SearchView.fxml"));
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		confirmButton.getScene().setRoot(menuView);
		menuView.setCenter(searchView);
	}

	@FXML
	public void addEvent(ActionEvent event) {
		if (inName.equals("")) {
			Alert alert = new Alert(AlertType.WARNING, "Ingredient Name can't be empty!", ButtonType.OK);
			alert.showAndWait();
		} else {
			cookbook.ingredients.add(new Ingredient(inName, category, amount, inUnit));
			inId = cookbook.ingredients.size() - 1;
			inCounter++;
			listData.add(cookbook.ingredients.get(inId));
			ingredientsList.setItems(listData);
		}
	}

	// Event Listener on Button[#minusInButton].onAction
	/**
	 * when press the minus button
	 * 
	 * @param event the event in this case
	 */
	@FXML
	public void minusEvent(ActionEvent event) {
		cookbook.ingredients.remove(ingredientsList.getSelectionModel().getSelectedItem());
		inId--;
		inCounter--;
		listData.remove(ingredientsList.getSelectionModel().getSelectedItem());
		ingredientsList.setItems(listData);
		// TODO Autogenerated
	}

	@FXML
	public void choosePicButton(ActionEvent event) {
		FileChooser fc = new FileChooser();
		fc.getExtensionFilters().add(new ExtensionFilter("pic files", "*.jpg", "*.png"));
		File f = fc.showOpenDialog(null);
		if (f != null) {
			pictureLabel.setText("Selected Picture:" + f.getAbsolutePath());
			cookbook.nowRecipe.setImagePath(f.getAbsolutePath());
		}
	}

	// Event Listener on Button[#confirmButton].onAction
	/**
	 * when press the confirm button
	 * 
	 * @param event the event in this case
	 */
	@FXML
	public void confirmEvent(ActionEvent event) {
		if (reName.equals("")) {
			Alert alert = new Alert(AlertType.WARNING, "Name can't be empty!", ButtonType.OK);
			alert.showAndWait();
		} else if (inCounter == 0) {
			Alert alert = new Alert(AlertType.WARNING, "Ingredient can't be empty!", ButtonType.OK);
			alert.showAndWait();
		} else if (servePeople == 0) {
			Alert alert = new Alert(AlertType.WARNING, "Serve people can't be empty!", ButtonType.OK);
			alert.showAndWait();
		} else {

			Alert alert = new Alert(AlertType.CONFIRMATION, "Create this new recipe?", ButtonType.YES,
					ButtonType.CANCEL);
			Optional<ButtonType> result = alert.showAndWait();
			if (result.get() == ButtonType.YES) {
				cookbook.nowRecipe.clearIngredient();
				cookbook.nowRecipe.setName(reName);
				cookbook.nowRecipe.setCookTime(cookTime);
				cookbook.nowRecipe.setSteps(steps);
				for (Ingredient in : cookbook.ingredients) {
					cookbook.nowRecipe.addIngredient(in);
				}
				try {
					RecipeDAO.updateRecipe(cookbook.nowRecipe);
				} catch (Exception e) {
					System.out.println("action failed!");
				}

				ButtonType back = new ButtonType("Back to homePage");
				ButtonType view = new ButtonType("View the recipe!");
				Alert alert1 = new Alert(AlertType.CONFIRMATION, "Success!", back, view);
				Optional<ButtonType> result1 = alert1.showAndWait();
				if (result1.get() == view) { // User authorizes the action.
					AnchorPane recipeView = null;
					BorderPane rootLayout = null;
					try {
						rootLayout = FXMLLoader.load(getClass().getResource("/cookbook.javafx/MenuView.fxml"));
						recipeView = FXMLLoader.load(getClass().getResource("/view/RecipeView.fxml"));
					} catch (IOException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
					confirmButton.getScene().setRoot(rootLayout);
					rootLayout.setCenter(recipeView);
				}

				if (result1.get() == back) {
					cookbook.update();

					AnchorPane MainView = null;
					BorderPane rootLayout = null;
					try {
						rootLayout = FXMLLoader.load(getClass().getResource("/cookbook.javafx/MenuView.fxml"));
						MainView = FXMLLoader.load(getClass().getResource("/cookbook.javafx/SearchView.fxml"));
					} catch (IOException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
					confirmButton.getScene().setRoot(rootLayout);
					rootLayout.setCenter(MainView);
				}
			}
		}
	}

	/**
	 * the initialization of the addview
	 * 
	 * @throws SQLException
	 * @throws ClassNotFoundException
	 */
	public void initialize() throws ClassNotFoundException, SQLException {
		recipeNameText.textProperty().addListener(new ChangeListener<String>() {
			@Override
			public void changed(ObservableValue<? extends String> observable, String oldValue, String newValue) {
				reName = recipeNameText.getText();
			}
		});
		cookTimeText.textProperty().addListener(new ChangeListener<String>() {
			@Override
			public void changed(ObservableValue<? extends String> observable, String oldValue, String newValue) {
				cookTime = Integer.valueOf(cookTimeText.getText());
			}
		});
		servePeopleText.textProperty().addListener(new ChangeListener<String>() {
			@Override
			public void changed(ObservableValue<? extends String> observable, String oldValue, String newValue) {
				if (servePeopleText.getText().matches("[0-9]+"))
					amount = Integer.valueOf(inAmountText.getText());
				else {
					Alert alert = new Alert(AlertType.INFORMATION, "Must be a number!");
					alert.showAndWait();
				}
			}
		});
		inNameText.textProperty().addListener(new ChangeListener<String>() {
			@Override
			public void changed(ObservableValue<? extends String> observable, String oldValue, String newValue) {
				inName = inNameText.getText();
			}
		});
		categoryList = FXCollections.observableArrayList(CategoryDAO.getAllCategoryString());
		categoryBox.getItems().addAll(categoryList);
		categoryBox.setVisibleRowCount(3);
		categoryBox.getSelectionModel().selectedItemProperty().addListener(new ChangeListener<String>() {
			@Override
			public void changed(ObservableValue<? extends String> observable, String oldValue, String newValue) {
				category = categoryBox.getItems().toString();
			}
		});
		inAmountText.textProperty().addListener(new ChangeListener<String>() {
			@Override
			public void changed(ObservableValue<? extends String> observable, String oldValue, String newValue) {
				if (inAmountText.getText().matches("[0-9]+"))
					amount = Integer.valueOf(inAmountText.getText());
				else {
					Alert alert = new Alert(AlertType.INFORMATION, "Must be a number!");
					alert.showAndWait();
				}
			}
		});
		inUnityText.textProperty().addListener(new ChangeListener<String>() {
			@Override
			public void changed(ObservableValue<? extends String> observable, String oldValue, String newValue) {
				inUnit = inUnityText.getText();
			}
		});
		stepsText.textProperty().addListener(new ChangeListener<String>() {
			@Override
			public void changed(ObservableValue<? extends String> observable, String oldValue, String newValue) {
				steps = stepsText.getText();
			}
		});

		ingredientsList.setOnMouseClicked(new EventHandler<MouseEvent>() {
			@Override
			public void handle(MouseEvent event) {
				if (ingredientsList.getSelectionModel().getSelectedItem() == null) {
				} else {
					Ingredient in = (Ingredient) ingredientsList.getSelectionModel().getSelectedItem();
					inNameText.setText(in.getName());
					inUnityText.setText(in.getUnit());
					inAmountText.setText("in.getAmount()");
					categoryBox.setValue(in.getCategory());
				}
			}
		});
		recipeNameText.setText(cookbook.nowRecipe.toString());
		servePeopleText.setText(String.valueOf(cookbook.nowRecipe.getServePeople()));
		cookTimeText.setText(String.valueOf(cookbook.nowRecipe.getCookTime()));
		stepsText.setText(cookbook.nowRecipe.getSteps());
		listData.addAll(cookbook.nowRecipe.getIngredientList());
		ingredientsList.setItems(listData);
		cookbook.ingredients.clear();
		cookbook.ingredients.addAll(listData);

		if (!cookbook.ingredients.isEmpty()) {
			inNameText.setText(cookbook.ingredients.get(0).getName());
			inAmountText.setText(cookbook.ingredients.get(0).getAmount() + "");
			inUnityText.setText(cookbook.ingredients.get(0).getUnit());
			inCounter = cookbook.nowRecipe.getIngredientList().size();
		}
	}

}
